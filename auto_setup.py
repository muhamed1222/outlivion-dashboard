#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
"""

import sys

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    import subprocess
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "psycopg2-binary", "-q"])
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n")
        return True
    except:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "psycopg2", "-q"])
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if install_dependencies():
    import psycopg2
    from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å psycopg2")
    sys.exit(1)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
DB_CONFIG = {
    'host': 'aws-0-eu-central-1.pooler.supabase.com',
    'port': 5432,
    'database': 'postgres',
    'user': 'postgres.ftqpccuyibzdczzowzkw',
    'password': None,  # –ë—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω
    'sslmode': 'require'
}

# SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã
SQL_SCHEMA = """
-- –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ (—Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤–æ–π)
CREATE TABLE IF NOT EXISTS plans (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  duration_days INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  telegram_id BIGINT UNIQUE NOT NULL,
  name TEXT,
  balance DECIMAL(10, 2) DEFAULT 0,
  subscription_expires TIMESTAMP WITH TIME ZONE,
  plan_id UUID REFERENCES plans(id),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–¥–æ–≤ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
CREATE TABLE IF NOT EXISTS codes (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  code TEXT UNIQUE NOT NULL,
  plan TEXT NOT NULL,
  days_valid INTEGER NOT NULL,
  used_by UUID REFERENCES users(id),
  used_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
CREATE TABLE IF NOT EXISTS referrals (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  referrer_id UUID REFERENCES users(id) NOT NULL,
  referred_id UUID REFERENCES users(id) NOT NULL,
  reward_amount DECIMAL(10, 2) DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(referrer_id, referred_id)
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
CREATE TABLE IF NOT EXISTS transactions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) NOT NULL,
  type TEXT CHECK (type IN ('payment', 'referral', 'code', 'subscription')) NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
CREATE TABLE IF NOT EXISTS payments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id) NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  method TEXT CHECK (method IN ('card', 'sbp', 'promo')) NOT NULL,
  status TEXT CHECK (status IN ('pending', 'completed', 'failed')) DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
CREATE TABLE IF NOT EXISTS auth_tokens (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  telegram_id BIGINT NOT NULL,
  token UUID UNIQUE NOT NULL DEFAULT gen_random_uuid(),
  expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  used BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–Ω–¥–µ–∫—Å—ã
CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
CREATE INDEX IF NOT EXISTS idx_codes_code ON codes(code);
CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_payments_user_id ON payments(user_id);
CREATE INDEX IF NOT EXISTS idx_referrals_referrer ON referrals(referrer_id);
CREATE INDEX IF NOT EXISTS idx_auth_tokens_token ON auth_tokens(token);
"""

SQL_DATA = """
-- –í—Å—Ç–∞–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
INSERT INTO plans (name, price, duration_days) VALUES
  ('1 –º–µ—Å—è—Ü', 199, 30),
  ('3 –º–µ—Å—è—Ü–∞', 499, 90),
  ('12 –º–µ—Å—è—Ü–µ–≤', 1499, 365)
ON CONFLICT DO NOTHING;
"""

SQL_FUNCTION = """
-- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
CREATE OR REPLACE FUNCTION generate_auth_token(tg_id BIGINT)
RETURNS JSON
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  new_token UUID;
  expires_at TIMESTAMP WITH TIME ZONE;
  result JSON;
BEGIN
  new_token := gen_random_uuid();
  expires_at := NOW() + INTERVAL '1 hour';
  
  INSERT INTO auth_tokens (telegram_id, token, expires_at, used)
  VALUES (tg_id, new_token, expires_at, false);
  
  result := json_build_object(
    'success', true,
    'token', new_token::text,
    'auth_url', 'https://outliviondashboard-kjtc8q3c5-outtime.vercel.app/auth/login?token=' || new_token::text,
    'expires_at', expires_at
  );
  
  RETURN result;
END;
$$;
"""

def get_password():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        return sys.argv[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    import os
    if 'SUPABASE_DB_PASSWORD' in os.environ:
        return os.environ['SUPABASE_DB_PASSWORD']
    
    print("üîê –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å –æ—Ç Supabase Database")
    print()
    print("üìç –ì–¥–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä–æ–ª—å:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://supabase.com/dashboard/project/ftqpccuyibzdczzowzkw/settings/database")
    print("   2. –ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–¥–µ–ª 'Connection string'")
    print("   3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–∞—Ä–æ–ª—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print()
    print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
    print("   python3 auto_setup.py YOUR_PASSWORD")
    print("   –∏–ª–∏")
    print("   SUPABASE_DB_PASSWORD=YOUR_PASSWORD python3 auto_setup.py")
    print()
    
    return None

def execute_setup(password):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î"""
    try:
        DB_CONFIG['password'] = password
        
        print("\nüîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        conn = psycopg2.connect(**DB_CONFIG)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        print("üìä –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
        cursor.execute(SQL_SCHEMA)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        
        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        print("üìù –î–æ–±–∞–≤–ª—è—é —Ç–∞—Ä–∏—Ñ—ã...")
        cursor.execute(SQL_DATA)
        print("‚úÖ –¢–∞—Ä–∏—Ñ—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        print("‚ö° –°–æ–∑–¥–∞—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
        cursor.execute(SQL_FUNCTION)
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        print()
        print("üß™ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É...")
        cursor.execute("SELECT COUNT(*) FROM plans")
        plans_count = cursor.fetchone()[0]
        print(f"   üìã –¢–∞—Ä–∏—Ñ–æ–≤ –≤ –±–∞–∑–µ: {plans_count}")
        
        cursor.execute("SELECT table_name FROM information_schema.tables WHERE table_schema='public' AND table_type='BASE TABLE'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"   üìä –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print(f"   üìù –°–ø–∏—Å–æ–∫: {', '.join(tables)}")
        
        cursor.close()
        conn.close()
        
        print()
        print("=" * 80)
        print("üéâ –ë–ê–ó–ê –î–ê–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        print()
        print("‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd telegram-bot && python3 bot.py")
        print()
        
        return True
        
    except psycopg2.OperationalError as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
        print("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        return False
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    print("=" * 80)
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê SUPABASE DATABASE")
    print("=" * 80)
    print()
    
    password = get_password()
    
    if password:
        if execute_setup(password):
            sys.exit(0)
        else:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            sys.exit(1)
    else:
        print("\n‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–≤–µ–¥—ë–Ω")
        sys.exit(1)

if __name__ == "__main__":
    main()

