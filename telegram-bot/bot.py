#!/usr/bin/env python3
"""
Outlivion Telegram Bot
–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Dashboard
"""

import os
import logging
from supabase import create_client, Client
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


def _require_env(var_name: str) -> str:
    value = os.getenv(var_name)
    if not value:
        raise RuntimeError(f"Environment variable {var_name} is not set")
    return value


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = _require_env("TELEGRAM_BOT_TOKEN")
SUPABASE_URL = os.getenv("TELEGRAM_BOT_SUPABASE_URL") or os.getenv("NEXT_PUBLIC_SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("TELEGRAM_BOT_SUPABASE_SERVICE_KEY") or os.getenv("SUPABASE_SERVICE_ROLE_KEY")
DASHBOARD_URL = os.getenv("TELEGRAM_BOT_DASHBOARD_URL") or os.getenv("NEXT_PUBLIC_APP_URL")
SUPPORT_URL = os.getenv("TELEGRAM_SUPPORT_URL") or os.getenv("NEXT_PUBLIC_SUPPORT_URL") or "https://t.me/outlivion_support"

if not SUPABASE_URL:
    raise RuntimeError("Environment variable TELEGRAM_BOT_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_URL is not set")
if not SUPABASE_SERVICE_KEY:
    raise RuntimeError("Environment variable TELEGRAM_BOT_SUPABASE_SERVICE_KEY or SUPABASE_SERVICE_ROLE_KEY is not set")
if not DASHBOARD_URL:
    raise RuntimeError("Environment variable TELEGRAM_BOT_DASHBOARD_URL or NEXT_PUBLIC_APP_URL is not set")


def create_supabase_client() -> Client:
    return create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    telegram_id = user.id
    username = user.username or user.first_name

    logger.info(f"User {username} ({telegram_id}) started the bot")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    referrer_id = None
    if context.args:
        try:
            referrer_id = int(context.args[0])
            logger.info(f"Referral detected: {referrer_id}")
        except ValueError:
            pass

    try:
        supabase_client = create_supabase_client()
        response = supabase_client.rpc('generate_auth_token', {'tg_id': telegram_id}).execute()

        if response.data:
            data = response.data
            auth_url = data.get("auth_url") or f"{DASHBOARD_URL.rstrip('/')}/auth/login?token={data.get('token')}"

            if referrer_id and referrer_id != telegram_id:
                save_referral(supabase_client, telegram_id, referrer_id)

            keyboard = [
                [InlineKeyboardButton("üîê –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", url=auth_url)]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            welcome_message = (
                f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n\n"
                f"üîê –î–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç Outlivion –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n\n"
                f"‚è± –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 1 —á–∞—Å.\n\n"
                f"–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                f"‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–ª–∞–Ω—Å–æ–º\n"
                f"‚Ä¢ üìä –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
                f"‚Ä¢ üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã\n"
                f"‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã"
            )

            await update.message.reply_text(
                welcome_message,
                reply_markup=reply_markup
            )
        else:
            logger.error(f"Failed to generate token: {response}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


def save_referral(supabase_client: Client, referred_id: int, referrer_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        response = supabase_client.table('users').select('id').eq('telegram_id', referrer_id).limit(1).execute()
        if response.data:
            logger.info(f"Referral saved: {referrer_id} -> {referred_id}")
    except Exception as e:
        logger.error(f"Error saving referral: {e}")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "/start - –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/referral - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
        "/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\n"
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "‚Ä¢ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n"
        "  –í–æ–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª '–ü–æ–ø–æ–ª–Ω–∏—Ç—å'\n\n"
        "‚Ä¢ –ö–∞–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?\n"
        "  –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ê–∫—Ç–∏–≤–∞—Ü–∏—è'\n\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞?\n"
        "  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /referral –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"
    )

    await update.message.reply_text(help_text, parse_mode='HTML')


async def referral_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /referral"""
    user = update.effective_user
    telegram_id = user.id

    bot_username = context.bot.username
    referral_link = f"https://t.me/{bot_username}?start={telegram_id}"

    referral_text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ <b>50 ‚ÇΩ</b> –∑–∞ –∫–∞–∂–¥–æ–≥–æ!\n\n"
        "üìé –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>{referral_link}</code>\n\n"
        "üí∞ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É\n"
        "2. –î—Ä—É–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –∫–æ–¥\n"
        "3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 50 ‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\n"
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ üéâ"
    )

    await update.message.reply_text(referral_text, parse_mode='HTML')


async def support_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
    keyboard = [
        [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url=SUPPORT_URL)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    support_text = (
        "üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Outlivion</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, "
        "–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å!\n\n"
        "‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞\n"
        "üïê –†–∞–±–æ—Ç–∞–µ–º: 24/7"
    )

    await update.message.reply_text(
        support_text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("Starting Outlivion Bot...")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("referral", referral_command))
    app.add_handler(CommandHandler("support", support_command))

    app.add_error_handler(error_handler)

    logger.info("Bot is ready! Starting polling...")

    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()
